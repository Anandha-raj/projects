useReducer is a hook in react to maintain the complex state logic.


syntax for the useReducer

const[state, dispatch] = useReducer(reducer, initialState)

here
    reducer: A function that tells how the state should change in response to an action
    initialState: The starting state for the reducer
    state: The current state, it will updated based on the actions dispatched
    dispatch: A function used to send an action to the reducer to update the state.

components of the useReducer
1) InitialState: The starting point of the state

2) Reducer function: This function determines the new state bases on the current state and an action 

3) Action: An object describing what change should be made. Actions typically have a "type" property and can include additioanl data.


when we are implementing useReducer in our application we have the following

1)Define the initialState

const initialState = {count: 0};


2) Define the reducer function
The reducer function takes the current state and an action as arguments and returns the new state

const reducer = (state, action) => (
    switch(action.type){
        case 'increment' :
            return {count: state.count + 1};
            break;
        case "decrement" :
            return {count: state.count - 1};
            break;
        default:
            throw new Error("unknow action type)
    }
)


3)we are going to setup useReducr in our component

const[state, dispatch] = useReducer(reducer, initialState)

4) dispatch actions to update the state

<button onClick = {() => dispatch({type: "increment"})}>Increment </button>
<button onClick = {() => dispatch({type: "decrement"})}>Decrement </button>

